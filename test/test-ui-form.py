# coding=utf-8
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import ElementClickInterceptedException
import unittest,test,time
class TestUIBase(test.TestSelenium):
	def tearDown(self):
		self.driver.execute_script("ecui.dispose(m)")
		self.driver.execute_script("m.innerHTML=''")
	def validate(self):
		return self.driver.execute_script("return ecui.esr.parseObject(document.forms.test,{})")
	def current(self):
		return self.driver.execute_script("var d={};ecui.esr.parseObject(document.forms.test,d);return d")
	def default(self):
		return self.driver.execute_script("var d={};ecui.esr.parseObject(document.forms.test,d,true,true);return d")
	def test_text(self):
		self.driver.execute_script("m.innerHTML='<form name=\"test\"><div ui=\"type:text;id:test;trim:true;len:1-7\" style=\"width:200px\"><input name=\"data\" value=\"t\" style=\"text-align:right\"></div></form>'")
		self.driver.execute_script("ecui.init(m)")
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getType()"), "ui-text")
		elem = self.driver.find_element(By.CLASS_NAME, "ui-text")
		ret = elem.find_element(By.CSS_SELECTOR, "input")
		ret.send_keys("123456")
		self.assertEqual(self.default()["data"], "t")
		self.assertEqual(self.default()["data"], "t")
		self.driver.execute_script("ecui.get('test').disable()")
		self.assertFalse("data" in self.current().keys())
		elem.click()
		self.assertEqual(self.driver.execute_script("return document.activeElement.tagName"), "BODY")
		self.driver.execute_script("ecui.get('test').enable()")
		self.assertEqual(self.default()["data"], "t")
		self.assertEqual(self.current()["data"], "t123456")
		self.assertEqual(self.default()["data"], "t123456")
		elem.click()
		self.assertEqual(self.driver.execute_script("return document.activeElement.tagName"), "INPUT")
		self.driver.execute_script("ecui.get('test').setSelection(0, 7)")
		ret.send_keys("   ")
		self.assertFalse(self.validate())
		ret.send_keys("   1234567")
		self.assertEqual(self.default()["data"], "t123456")
		self.assertEqual(self.current()["data"], "1234567")
		ret.send_keys("8")
		self.assertFalse(self.validate())
	def test_number(self):
		self.driver.execute_script("m.innerHTML='<div ui=\"type:number;id:test;min:0;max:999;decimal:2;valid:input\" style=\"width:200px\"></div>'")
		self.driver.execute_script("ecui.init(m)")
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getType()"), "ui-number")
		elem = self.driver.find_element(By.CSS_SELECTOR, ".ui-number input")
		elem.send_keys("3")
		elem.send_keys("8")
		elem.send_keys("a")
		elem.send_keys("7")
		elem.send_keys("9")
		self.assertTrue(self.driver.execute_script("return ecui.get('test').getMain().classList.contains('ui-number-error')"))
		elem.send_keys(Keys.BACK_SPACE)
		self.assertFalse(self.driver.execute_script("return ecui.get('test').getMain().classList.contains('ui-number-error')"))
		elem.send_keys(".")
		elem.send_keys("3")
		elem.send_keys(".")
		elem.send_keys("5")
		elem.send_keys("6")
		self.assertTrue(self.driver.execute_script("return ecui.get('test').getMain().classList.contains('ui-number-error')"))
		elem.send_keys(Keys.BACK_SPACE)
		self.assertFalse(self.driver.execute_script("return ecui.get('test').getMain().classList.contains('ui-number-error')"))
		self.assertEqual(elem.get_property("value"), "387.53")
		self.driver.execute_script("return ecui.get('test').setSelection(2)")
		ActionChains(self.driver).key_down(Keys.SHIFT).send_keys(Keys.RIGHT).send_keys(Keys.RIGHT).send_keys(Keys.RIGHT).key_up(Keys.SHIFT).send_keys(".").perform()
		self.assertEqual(elem.get_property("value"), "38.3")
		elem.send_keys("-")
		self.assertEqual(elem.get_property("value"), "38.3")
		self.driver.execute_script("return ecui.get('test').setSelection(0)")
		elem.send_keys("-")
		self.assertEqual(elem.get_property("value"), "38.3")
		self.driver.execute_script("ecui.dispose(m)")
		self.driver.execute_script("m.innerHTML='<div ui=\"type:number;id:test;min:-1;max:999;decimal:0;valid:input\" style=\"width:200px\"></div>'")
		self.driver.execute_script("ecui.init(m)")
		elem = self.driver.find_element(By.CSS_SELECTOR, ".ui-number input")
		elem.click()
		elem.send_keys("-")
		elem.send_keys("3")
		elem.send_keys("8")
		elem.send_keys(".")
		self.assertEqual(elem.get_property("value"), "-38")
		self.driver.execute_script("return ecui.get('test').setSelection(0)")
		elem.send_keys("-")
		elem.send_keys("5")
		self.assertEqual(elem.get_property("value"), "-38")
	def test_finance(self):
		self.driver.execute_script("m.innerHTML='<div ui=\"type:finance;id:test;decimal:4\" style=\"width:200px\"></div>'")
		self.driver.execute_script("ecui.init(m)")
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getType()"), "ui-finance")
		elem = self.driver.find_element(By.CSS_SELECTOR, ".ui-finance input")
		elem.click()
		elem.send_keys("-")
		self.assertEqual(self.driver.execute_script("return ecui.dom.getSelectionStart(ecui.get('test').getInput())"), 1)
		elem.send_keys("1")
		elem.send_keys("2")
		elem.send_keys("3")
		elem.send_keys("4")
		self.driver.execute_script("ecui.get('test').setSelection(2)")
		elem.send_keys(Keys.BACK_SPACE)
		self.assertEqual(self.driver.execute_script("return ecui.dom.getSelectionStart(ecui.get('test').getInput())"), 1)
		self.assertEqual(self.driver.execute_script("return ecui.dom.getSelectionEnd(ecui.get('test').getInput())"), 1)
		elem.send_keys("1")
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getValue()"), "-1234")
		self.driver.execute_script("ecui.get('test').setSelection(0,2)")
		self.assertEqual(self.driver.execute_script("return ecui.dom.getSelectionStart(ecui.get('test').getInput())"), 0)
		self.assertEqual(self.driver.execute_script("return ecui.dom.getSelectionEnd(ecui.get('test').getInput())"), 2)
		self.driver.execute_script("ecui.get('test').setSelection(0,3)")
		self.assertEqual(self.driver.execute_script("return ecui.dom.getSelectionStart(ecui.get('test').getInput())"), 0)
		self.assertEqual(self.driver.execute_script("return ecui.dom.getSelectionEnd(ecui.get('test').getInput())"), 4)
		self.driver.execute_script("ecui.get('test').setSelection(1,3)")
		self.assertEqual(self.driver.execute_script("return ecui.dom.getSelectionStart(ecui.get('test').getInput())"), 1)
		self.assertEqual(self.driver.execute_script("return ecui.dom.getSelectionEnd(ecui.get('test').getInput())"), 4)
		self.driver.execute_script("ecui.get('test').setSelection(1)")
		elem.send_keys(Keys.BACK_SPACE)
		self.driver.execute_script("ecui.get('test').setSelection(4)")
		elem.send_keys(".")
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getInput().value"), "1,234.")
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getSelectionStart()"), 5)
		elem.send_keys("1")
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getInput().value"), "1,234.1")
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getSelectionStart()"), 6)
		elem.send_keys(".")
		elem.send_keys("2")
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getInput().value"), "1,234.21")
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getSelectionStart()"), 6)
		self.driver.execute_script("ecui.get('test').setSelection(1)")
		elem.send_keys(Keys.RIGHT)
		self.assertEqual(self.driver.execute_script("return ecui.dom.getSelectionStart(ecui.get('test').getInput())"), 3)
		elem.send_keys(Keys.LEFT)
		self.assertEqual(self.driver.execute_script("return ecui.dom.getSelectionStart(ecui.get('test').getInput())"), 1)
	def test_email(self):
		self.driver.execute_script("m.innerHTML='<div ui=\"type:email;id:test\" style=\"width:200px\"></div>'")
		self.driver.execute_script("ecui.init(m)")
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getType()"), "ui-email")
		elem = self.driver.find_element(By.CSS_SELECTOR, ".ui-email input")
		elem.click()
		elem.send_keys("_")
		elem.send_keys("3")
		elem.send_keys("-")
		elem.send_keys("8")
		elem.send_keys("@")
		elem.send_keys(".")
		elem.send_keys("+")
		elem.send_keys("c")
		elem.send_keys("o")
		elem.send_keys("m")
		elem.send_keys("@")
		elem.send_keys("q")
		elem.send_keys("q")
		self.assertEqual(elem.get_property("value"), "_3-8@qq.com")
	def test_time(self):
		self.driver.execute_script("m.innerHTML='<div ui=\"type:time;id:test\" style=\"width:200px\"></div>'")
		self.driver.execute_script("ecui.init(m)")
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getType()"), "ui-time")
		elem = self.driver.find_element(By.CSS_SELECTOR, ".ui-time input")
		ActionChains(self.driver).move_to_element(elem).move_by_offset(-99, 0).click().perform()
		elem.send_keys("2")
		elem.send_keys("4")
		elem.send_keys("8")
		elem.send_keys("5")
		elem.send_keys("9")
		elem.send_keys("+")
		elem.send_keys(":")
		elem.send_keys("2")
		elem.send_keys("0")
		elem.send_keys("1")
		self.assertEqual(elem.get_property("value"), "23:59:21")
	def test_checkbox(self):
		self.driver.execute_script("m.innerHTML='<div ui=\"type:checkbox;subject:test;id:test0;name:test;checked:true;required:true\"></div><label>测试Label<div ui=\"type:checkbox;id:test\"></div></label><div ui=\"type:checkbox;subject:test;id:test1;name:test;checked:true;required:true\"></div>'")
		self.driver.execute_script("ecui.init(m)")
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getType()"), "ui-checkbox")
		self.assertTrue(self.driver.execute_script("return ecui.get('test0').isDefaultChecked()"))
		self.driver.execute_script("ecui.get('test').onchange=function(){log('test')}")
		self.driver.execute_script("ecui.get('test0').onchange=function(){log('test0')}")
		self.driver.execute_script("ecui.get('test1').onchange=function(){log('test1')}")
		elem = self.driver.find_elements(By.CSS_SELECTOR, ".ui-checkbox")
		self.assertTrue(self.driver.execute_script("return ecui.get('test').isChecked()"))
		self.assertTrue(self.driver.execute_script("return ecui.get('test0').isChecked()"))
		self.assertTrue(self.driver.execute_script("return ecui.get('test1').isChecked()"))
		elem[0].click()
		self.assertFalse(self.driver.execute_script("return ecui.get('test').isChecked()"))
		self.assertTrue(self.driver.execute_script("return ecui.get('test').getMain().classList.contains('ui-checkbox-part')"))
		elem[2].click()
		self.assertFalse(self.driver.execute_script("return ecui.get('test').isChecked()"))
		self.assertFalse(self.driver.execute_script("return ecui.get('test').getMain().classList.contains('ui-checkbox-part')"))
		elem[1].get_property("parentElement").click()
		self.assertTrue(self.driver.execute_script("return ecui.get('test').isChecked()"))
		self.assertTrue(self.driver.execute_script("return ecui.get('test0').isChecked()"))
		self.assertTrue(self.driver.execute_script("return ecui.get('test1').isChecked()"))
		ActionChains(self.driver).send_keys(' ').perform()
		self.assertFalse(self.driver.execute_script("return ecui.get('test').isChecked()"))
		self.assertFalse(self.driver.execute_script("return ecui.get('test0').isChecked()"))
		self.assertFalse(self.driver.execute_script("return ecui.get('test1').isChecked()"))
		self.driver.execute_script("ecui.get('test0').validate()")
		self.assertTrue(self.driver.execute_script("return ecui.get('test0').getMain().classList.contains('ui-checkbox-error')"))
		elem[2].click()
		self.assertFalse(self.driver.execute_script("return ecui.get('test0').getMain().classList.contains('ui-checkbox-error')"))
		self.driver.execute_script("ecui.get('test0').validate()")
		self.assertFalse(self.driver.execute_script("return ecui.get('test0').getMain().classList.contains('ui-checkbox-error')"))
		self.driver.execute_script("ecui.get('test0').setSubject()")
		self.assertTrue(self.driver.execute_script("return ecui.get('test').isChecked()"))
		self.driver.execute_script("ecui.get('test0').setParent();m.appendChild(ecui.get('test0').getMain())")
		self.assertTrue(self.driver.execute_script("return ecui.get('test0').isDefaultChecked()"))
		self.assertEqual(self.logs.get_property('textContent'), "test\ntest0\ntest\ntest1\ntest0\ntest1\ntest\ntest0\ntest1\ntest\ntest1\ntest")
		self.clearLogs()
	def test_radio(self):
		self.driver.execute_script("m.innerHTML='<div ui=\"type:radio;id:test0;name:test;required:true\"></div><label>测试Label<div ui=\"type:radio;id:test1;name:test;required:true\"></div></label>'")
		self.driver.execute_script("ecui.init(m)")
		self.assertEqual(self.driver.execute_script("return ecui.get('test0').getType()"), "ui-radio")
		self.driver.execute_script("ecui.get('test0').onchange=function(){log('test0')}")
		self.driver.execute_script("ecui.get('test1').onchange=function(){log('test1')}")
		elem = self.driver.find_elements(By.CSS_SELECTOR, ".ui-radio")
		self.driver.execute_script("ecui.get('test0').validate()")
		self.assertTrue(self.driver.execute_script("return ecui.get('test0').getMain().classList.contains('ui-radio-error')"))
		elem[1].get_property("parentElement").click()
		elem[1].get_property("parentElement").click()
		elem[1].click()
		elem[1].click()
		self.assertFalse(self.driver.execute_script("return ecui.get('test0').getMain().classList.contains('ui-radio-error')"))
		self.driver.execute_script("ecui.get('test0').validate()")
		self.assertFalse(self.driver.execute_script("return ecui.get('test0').getMain().classList.contains('ui-radio-error')"))
		elem[0].click()
		self.assertTrue(self.driver.execute_script("return ecui.get('test0').isChecked()"))
		self.assertFalse(self.driver.execute_script("return ecui.get('test1').isChecked()"))
		self.driver.execute_script("ecui.get('test0').saveToDefault();ecui.get('test0').setParent();m.appendChild(ecui.get('test0').getMain())")
		self.assertTrue(self.driver.execute_script("return ecui.get('test0').isDefaultChecked()"))
		self.assertTrue(self.driver.execute_script("return ecui.get('test0').isChecked()"))
		self.assertEqual(self.logs.get_property('textContent'), "test1\ntest1\ntest0")
		self.clearLogs()
	def test_select(self):
		self.driver.execute_script("m.innerHTML='<select ui=\"type:select;id:test;name:test;required:true;option-size:4\"><option>0</option><option value=\"o1\">1</option><option ui=\"value:v2\">2</option><option>3</option><option selected>4</option></select>'")
		self.driver.execute_script("ecui.init(m)")
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getType()"), "ui-select")
		elem = self.driver.find_element(By.CSS_SELECTOR, ".ui-select")
		items = self.driver.find_elements(By.CSS_SELECTOR, ".ui-select-item")
		self.assertEqual(len(items), 1)
		elem.click()
		items = self.driver.find_elements(By.CSS_SELECTOR, ".ui-select-item")
		self.assertTrue(self.driver.execute_script("return ecui.get('test').getBody().scrollTop>0"))
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getSelected().getMain()"), items[5])
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getSelecting().getMain()"), items[5])
		ActionChains(self.driver).move_to_element(items[2]).perform()
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getSelected().getMain()"), items[5])
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getSelecting().getMain()"), items[2])
		ActionChains(self.driver).click().perform()
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getSelected().getMain()"), items[2])
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getValue()"), "o1")
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getSelecting().getMain()"), items[2])
		self.assertFalse(items[1].is_displayed())
		elem.click()
		self.assertTrue(self.driver.execute_script("return ecui.get('test').getBody().scrollTop>0"))
		ActionChains(self.driver).send_keys(Keys.UP).perform()
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getSelected().getMain()"), items[2])
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getSelecting().getMain()"), items[1])
		self.assertTrue(self.driver.execute_script("return ecui.get('test').getBody().scrollTop===0"))
		ActionChains(self.driver).send_keys(Keys.UP).perform()
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getSelecting().getMain()"), items[1])
		ActionChains(self.driver).send_keys(Keys.DOWN).perform()
		self.assertTrue(self.driver.execute_script("return ecui.get('test').getBody().scrollTop===0"))
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getSelecting().getMain()"), items[2])
		ActionChains(self.driver).send_keys(Keys.DOWN).send_keys(Keys.DOWN).send_keys(Keys.DOWN).send_keys(Keys.DOWN).perform()
		self.assertTrue(self.driver.execute_script("return ecui.get('test').getBody().scrollTop>0"))
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getSelecting().getMain()"), items[5])
		ActionChains(self.driver).send_keys(Keys.UP).perform()
		self.assertTrue(self.driver.execute_script("return ecui.get('test').getBody().scrollTop>0"))
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getSelecting().getMain()"), items[4])
		ActionChains(self.driver).send_keys(Keys.ENTER).perform()
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getValue()"), "3")
		ActionChains(self.driver).send_keys(Keys.UP).perform()
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getValue()"), "v2")
		ActionChains(self.driver).send_keys(Keys.UP).send_keys(Keys.UP).send_keys(Keys.UP).perform()
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getValue()"), "0")
		ActionChains(self.driver).send_keys(Keys.DOWN).send_keys(Keys.DOWN).send_keys(Keys.DOWN).send_keys(Keys.DOWN).send_keys(Keys.DOWN).perform()
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getValue()"), "4")
		elem.click()
		ActionChains(self.driver).move_to_element(items[3]).send_keys(Keys.UP).send_keys(Keys.UP).send_keys(Keys.UP).send_keys(Keys.UP).perform()
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getSelecting().getMain()"), items[3])
		ActionChains(self.driver).send_keys(Keys.DOWN).send_keys(Keys.DOWN).send_keys(Keys.DOWN).send_keys(Keys.DOWN).perform()
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getSelecting().getMain()"), items[3])
		ActionChains(self.driver).send_keys(Keys.ESCAPE).perform()
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getValue()"), "4")
		self.driver.execute_script("ecui.get('test').getItem(4).setValue('t4')")
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getValue()"), "t4")
		elem.click()
		self.driver.execute_script("window.a=ecui.get('test').getBody().scrollTop>0")
		self.driver.execute_script("ecui.get('test').setOptionSize(3)")
		self.assertTrue(self.driver.execute_script("return ecui.get('test').getBody().scrollTop>a"))
		self.driver.execute_script("delete window.a")
		self.driver.execute_script("ecui.get('test').setValue('4')")
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getValue()"), "")
		self.driver.execute_script("ecui.get('test').validate()")
		self.assertTrue(self.driver.execute_script("return ecui.get('test').getMain().classList.contains('ui-select-error')"))
	def test_combox(self):
		self.driver.execute_script("m.innerHTML='<select ui=\"type:combox;id:test;name:test;required:true\"><option>00</option><option>01</option><option>10</option><option>11</option></select>'")
		self.driver.execute_script("ecui.init(m)")
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getType()"), "ui-combox")
		elem = self.driver.find_element(By.CSS_SELECTOR, ".ui-combox input")
		elem.click();
		items = self.driver.find_elements(By.CSS_SELECTOR, ".ui-combox-item")
		elem.click();
		self.assertTrue(items[1].is_displayed())
		items[1].click()
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getSelected().getMain()"), items[1])
		self.assertFalse(items[1].is_displayed())
		elem.send_keys(Keys.BACK_SPACE)
		self.assertTrue(items[0].is_displayed())
		self.assertTrue(items[1].is_displayed())
		self.assertTrue(items[2].is_displayed())
		self.assertFalse(items[3].is_displayed())
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getSelected()"), None)
		self.logs.click();
		elem.click();
		self.assertTrue(items[0].is_displayed())
		self.assertTrue(items[1].is_displayed())
		self.assertTrue(items[2].is_displayed())
		self.assertTrue(items[3].is_displayed())
		self.driver.execute_script("ecui.get('test').validate()")
		self.assertFalse(self.driver.execute_script("return ecui.get('test').getMain().classList.contains('ui-combox-error')"))
		self.driver.execute_script("ecui.dispose(m)")
		self.driver.execute_script("m.innerHTML='<select ui=\"type:combox;id:test;name:test;required:true;custom:false\"><option>00</option><option>01</option><option>10</option><option>11</option></select>'")
		self.driver.execute_script("ecui.init(m)")
		elem = self.driver.find_element(By.CSS_SELECTOR, ".ui-combox input")
		elem.send_keys(Keys.BACK_SPACE)
		self.driver.execute_script("ecui.get('test').validate()")
		self.assertTrue(self.driver.execute_script("return ecui.get('test').getMain().classList.contains('ui-combox-error')"))
		# 缺远程拉取参数的用例
	def test_date(self):
		self.driver.execute_script("m.innerHTML='<div ui=\"type:date;id:test0;name:test;value:2022-11-11\"></div><div ui=\"type:date;id:test1;name:test;value:2022-09-18\"></div>'")
		self.driver.execute_script("ecui.init(m)")
		self.assertEqual(self.driver.execute_script("return ecui.get('test0').getType()"), "ui-date")
		elem = self.driver.find_elements(By.CSS_SELECTOR, ".ui-date input")
		elem[0].click()
		self.assertEqual(self.driver.execute_script("return ecui.get('test0').getPopup().getMonth()"), 11)
		elem[1].click()
		self.assertEqual(self.driver.execute_script("return ecui.get('test1').getPopup().getMonth()"), 9)
		self.driver.find_elements(By.CSS_SELECTOR, ".ui-calendar td")[30].click();
		self.assertEqual(self.driver.execute_script("return ecui.get('test1').getValue()"), "2022-09-20")
	def test_date_range(self):
		self.driver.execute_script("m.innerHTML='<div ui=\"type:date-range;id:test;name:test;value:2022-09-18,2022-11-11\"></div>'")
		self.driver.execute_script("ecui.init(m)")
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getType()"), "ui-date-range")
		elem = self.driver.find_element(By.CSS_SELECTOR, ".ui-date-range")
		elem.click()
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getPopup().$getSection('From').getMonth()"), 9)
		elem = self.driver.find_elements(By.CSS_SELECTOR, ".ui-range-calendar td");
		elem[30].click();
		elem[70].click();
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getValue()"), "2022-09-20,2022-10-09")
	def test_couple_slider(self):
		self.driver.execute_script("m.innerHTML='<div ui=\"type:couple-slider;id:test;name:test;segment:10;value:1,8\"></div>'")
		self.driver.execute_script("ecui.init(m)")
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getType()"), "ui-couple-slider")
	def test_listbox(self):
		self.driver.execute_script("m.innerHTML='<div ui=\"type:listbox;id:test;name:test\"><div ui=\"selected:true\">1</div><div>2</div><div>3</div><div>4</div></div>'")
		self.driver.execute_script("ecui.init(m)")
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getType()"), "ui-listbox")
		items = self.driver.find_elements(By.CLASS_NAME, "ui-listbox-item")
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getSelected().map(function(i){return i.getMain()})"), [items[0]])
		self.driver.execute_script("ecui.get('test').selectAll()")
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getSelected().map(function(i){return i.getMain()})"), [items[0], items[1], items[2], items[3]])
		items[0].click()
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getSelected().map(function(i){return i.getMain()})"), [items[1], items[2], items[3]])
		self.assertEqual(self.driver.execute_script("return ecui.get('test').getItem(1).getName()"), "test")
unittest.main(argv=[''])
