from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException
import unittest,test,time
class TestAdapter(test.TestSelenium):
	def dom_addClass_hasClass_removeClass(self):
		self.driver.execute_script("dom.addClass(m,' aaa bbb ');dom.addClass(m,'aaa ccc')")
		self.assertEqual(self.main.get_attribute("class"), "aaa bbb ccc")
		self.driver.execute_script("dom.removeClass(m,' aaa ccc  bbb ')")
		self.assertEqual(self.main.get_attribute("class"), "")
	def dom_addEventListener_removeEventListener(self):
		self.driver.execute_script("window.a=function(e){log(e.type)};m.innerHTML='<br>'")
		self.driver.execute_script("dom.addEventListener(m,'click',a)")
		self.main.click();
		self.assertEqual(self.logs.get_property("textContent"), "click")
		self.clearLogs()
		self.driver.execute_script("dom.removeEventListener(m,'click',a)")
		self.main.click();
		self.assertEqual(self.logs.get_property("textContent"), "")
		self.clearLogs()
		self.driver.execute_script("dom.addEventListeners(m,{mousedown:a,mouseup:a})")
		self.main.click();
		self.assertEqual(self.logs.get_property("textContent"), "mousedown\nmouseup")
		self.clearLogs()
		self.driver.execute_script("dom.removeEventListeners(m,{mousedown:a,mouseup:a})")
		self.main.click();
		self.assertEqual(self.logs.get_property("textContent"), "")
		self.clearLogs()
		self.driver.execute_script("m.innerHTML='';delete window.a")
	def dom_create_children_remove(self):
		self.driver.execute_script("window.a=dom.create({className:'aaa'});window.b=dom.create();window.c=dom.create('span');m.appendChild(a);m.appendChild(b);m.appendChild(c)")
		ret = self.driver.find_elements(By.CSS_SELECTOR, "#main>*")
		self.assertEqual(self.driver.execute_script("return dom.children(m)"), ret)
		self.assertEqual(len(ret), 3)
		self.assertEqual(ret[1].tag_name.lower(), "div")
		self.assertEqual(ret[2].tag_name.lower(), "span")
		self.assertEqual(
			self.driver.execute_script("return dom.children(document.body)"),
			self.driver.find_elements(By.CSS_SELECTOR, "body>*")
		)
		self.driver.execute_script("dom.remove(a);dom.remove(b);dom.remove(c);delete window.a;delete window.b;delete window.c")
		self.assertEqual(len(self.driver.find_elements(By.CSS_SELECTOR, "#main>*")), 0)
	def dom_createStyleSheet_getStyle_setStyle_setStyles(self):
		self.driver.execute_script("window.a=dom.createStyleSheet('#main{background:#FF0000}')")
		self.assertEqual(self.driver.execute_script("return dom.getStyle(m,'background-color')"), "rgb(255, 0, 0)")
		self.assertEqual(self.driver.execute_script("return dom.getStyle(m,'backgroundColor')"), "rgb(255, 0, 0)")
		self.driver.execute_script("dom.setStyle(m,'item-height','10px')")
		self.assertEqual(self.driver.execute_script("return dom.getStyle(m,'itemHeight')"), "10px")
		self.driver.execute_script("dom.setStyles(m,{'item-height':''})")
		self.assertEqual(self.driver.execute_script("return dom.getStyle(m,'item-height')"), "")
		self.assertEqual(self.formatColor(self.main.value_of_css_property("background-color")), "rgba(255, 0, 0, 1)")
		self.driver.execute_script("dom.remove(a);delete window.a")
		self.assertEqual(self.formatColor(self.main.value_of_css_property("background-color")), "rgba(0, 0, 0, 0)")
	def dom_getPosition_getView_scrollIntoViewIfNeeded(self):
		ret = self.driver.execute_script("return dom.getPosition(ecui.$('logs'))")
		self.assertEqual(ret['top'], self.driver.execute_script("return dom.getView().height-100"))
		self.assertEqual(ret['left'], 0)
		self.driver.execute_script("window.a=dom.create();a.style.cssText='position:absolute;width:100px;height:100px;background:red';m.appendChild(a);m.style.height='2000px'")
		self.driver.execute_script("a.style.top='900px';dom.scrollIntoViewIfNeeded(a)")
		ret = self.driver.execute_script("return dom.getView()")
		self.assertEqual(ret['height'] + (ret['height'] % 2), (900 - ret['top']) * 2 + 100)
		self.driver.execute_script("a.style.top='100px';dom.scrollIntoViewIfNeeded(a,false)")
		ret = self.driver.execute_script("return dom.getView()")
		self.assertEqual(ret['top'], 100)
		self.driver.execute_script("a.style.top='1400px';dom.scrollIntoViewIfNeeded(a,false)")
		ret = self.driver.execute_script("return dom.getView()")
		self.assertEqual(ret['top'], 1400 - ret['height'] + 100)
		self.driver.execute_script("m.style.height='';dom.remove(a);delete window.a")
	def dom_imgLoad_ready(self):
		self.driver.execute_script("window.a=dom.create('img');m.appendChild(a)")
		self.driver.execute_script("dom.imgLoad(a,function(){log('success')},function(){log('error')});a.src='error.img'")
		self.waitLogs()
		self.assertEqual(self.logs.text, "error")
		self.clearLogs()
		self.driver.execute_script("dom.imgLoad(a,function(){log('success')},function(){log('error')});a.src='images/ecui/arrow.png'")
		self.waitLogs()
		self.assertEqual(self.logs.text, "success")
		self.clearLogs()
		self.driver.execute_script("dom.imgLoad(a,function(){log('success')},function(){log('error')})")
		self.assertEqual(self.logs.text, "success")
		self.clearLogs()
		self.driver.execute_script("dom.remove(a);delete window.a")
		self.driver.execute_script("dom.ready(function(){log('ready')})")
		self.assertEqual(self.logs.text, "ready")
		self.clearLogs()
	def dom_insertAfter_insertBefore(self):
		self.driver.execute_script("window.a=dom.create({id:'test'});window.b=dom.create()")
		self.driver.execute_script("dom.insertAfter(a,m)")
		self.assertEqual(self.driver.find_elements(By.CSS_SELECTOR, "body>*")[1], self.driver.find_element(By.ID, "test"))
		self.driver.execute_script("dom.insertAfter(a,b)")
		self.assertRaises(NoSuchElementException, lambda driver: driver.find_element(By.ID, "test"), self.driver)
		self.driver.execute_script("dom.insertBefore(a,m)")
		self.assertEqual(self.driver.find_elements(By.CSS_SELECTOR, "body>*")[0], self.driver.find_element(By.ID, "test"))
		self.driver.execute_script("dom.insertAfter(a,b)")
		self.assertRaises(NoSuchElementException, lambda driver: driver.find_element(By.ID, "test"), self.driver)
		self.driver.execute_script("dom.remove(a),dom.remove(b);delete window.a;delete window.b")		
	def dom_isEditable(self):
		self.driver.execute_script("m.innerHTML='<textarea></textarea><input><input type=checkbox><input type=radio><div></div>';window.a=dom.children(m)")
		self.assertTrue(self.driver.execute_script("return dom.isEditable(a[0])"))
		self.assertTrue(self.driver.execute_script("return dom.isEditable(a[1])"))
		self.assertFalse(self.driver.execute_script("return dom.isEditable(a[2])"))
		self.assertFalse(self.driver.execute_script("return dom.isEditable(a[3])"))
		self.driver.execute_script("m.setAttribute('contenteditable','true')")
		self.assertTrue(self.driver.execute_script("return dom.isEditable(a[4])"))
		self.driver.execute_script("m.removeAttribute('contenteditable')")
		self.assertFalse(self.driver.execute_script("return dom.isEditable(a[4])"))
		self.driver.execute_script("m.innerHTML='';delete window.a")
	def dom_toArray_toPixel(self):
		self.assertEqual(self.driver.execute_script("return dom.toArray()"), [])
		self.assertEqual(self.driver.execute_script("return dom.toArray(m)"), [self.main])
		self.assertEqual(self.driver.execute_script("return dom.toArray([m])"), [self.main])
		self.assertEqual(self.driver.execute_script("return dom.toArray([m, m.nextElementSibling])"), [self.main, self.logs])
		self.assertEqual(self.driver.execute_script("return dom.toPixel('3px')"), 3)
		self.assertEqual(self.driver.execute_script("return dom.toPixel('3rem')"), 42)
	def test_dom(self):
		self.dom_addClass_hasClass_removeClass()
		self.dom_addEventListener_removeEventListener()
		self.dom_create_children_remove()
		self.dom_createStyleSheet_getStyle_setStyle_setStyles()
		self.dom_getPosition_getView_scrollIntoViewIfNeeded()
		self.dom_imgLoad_ready()
		self.dom_insertAfter_insertBefore()
		self.dom_isEditable()
		self.dom_toArray_toPixel()
	def test_effect(self):
		self.driver.execute_script("ecui.effect.grade('this.style.bottom=#0->100px#',200,ecui.$('logs'),{onfinish:function(){log(ecui.$('logs').style.bottom)}})")
		self.waitLogs()
		self.assertEqual(self.logs.text, "100px")
		self.clearLogs()
		self.driver.execute_script("ecui.$('logs').style.bottom='0px'")
		self.driver.execute_script("ecui.effect.grade('this.style.bottom->100px',200,ecui.$('logs'),{onfinish:function(){log(ecui.$('logs').style.bottom)}})")
		self.waitLogs()
		self.assertEqual(self.logs.text, "100px")
		self.clearLogs()
		self.driver.execute_script("ecui.$('logs').style.bottom='0px'")

unittest.main(argv=[''])
