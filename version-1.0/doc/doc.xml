<?xml version='1.0' encoding="UTF-8"?>

<book xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en">

    <bookinfo>
        <title>ecui（Enterprise Class UI）框架应用指南</title>
        <author>
            <firstname>allstar<email>ouyangxianwei@baidu.com</email></firstname>
        </author>
    </bookinfo>

    <chapter>
        <title>简介</title>
        <para>随着ajax技术的广泛应用，大型网站与企业内部管理网站页面承担着越来越多的复杂业务展现，ecui致力于解决企业级开发中复杂的UI交互控制，在充分利用HTML/CSS特性的前提下提供面向开发人员的简单接口。</para>
        <para>ecui控件库是一个集中管理事件与状态的UI控件库，针对标准页面元素的事件进行扩展，处理逻辑与开放API非常类似于Windows下的MFC,VCL等控件库，从而将开发人员从控件的实现与状态控制中解放出来，专心的进行业务逻辑的代码编写。与传统的Web独立控件相比，在复杂的UI界面开发中非常有优势。它提供了自定义滚动条、输入控件、日历、树、表格、浮动层等的支持，支持面向不同层次开发人员的展现与功能扩展方式。</para>
		<para>目前，ecui控件库的演示版支持IE6, IE7, IE8, Firefox, Opera, Safari, Chrome等多款浏览器。</para>
    </chapter>

    <chapter>
        <title>开始：创建第一个控件！</title>
        <para>本章按步骤教您建立一个基础控件！任何复杂的控件都是基础控件的继承或组合。</para>
        <section>
            <title>第一步：建立html</title>
            <para>新建一个UTF-8编码的文本文件，命名为demo.html。</para>
            <para>一个完整的标准的html包含了DOCTYPE、html、head以及body部分。</para>
            <para>通常一个html需要在head部分的顶端指定content-type，定义内容类型以及字符集。UTF-8更适合于国际化。</para>
            <programlisting><![CDATA[<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>hello</title>
<script type="text/javascript" src="ecui-1.2.0.js"></script>
</head>
<body></body>
</html>]]></programlisting>
        </section>
        <section>
            <title>第二步：控件的声明</title>
            <para>ecui控件可以通过直接在DOM标签上增加属性来声明，框架会自动根据DOM节点的信息来生成控件。</para>
            <programlisting><![CDATA[<div style="width:98px;height:98px;border:1px solid black;font-size:12px" ecui="type:control;id:demo">点击获取焦点，背景将变为红色。无焦点时鼠标移入，背景将变为蓝色。控件拥有焦点时，按1键变小，按2键变大。</div>]]></programlisting>
        </section>
        <section>
            <title>第三步：设置控件的状态样式</title>
            <para>ecui根据控件的状态变化，将自动的设置样式，有关状态样式我们将在后面的章节详细说明，在这里仅定义控件的原始样式、移入时样式与获取焦点时的样式。</para>
            <programlisting><![CDATA[.ec-control-over {background:blue;color:white}
.ec-control-focus {background:red;color:white}]]></programlisting>
        </section>
        <section>
            <title>第四步：编写控件的事件</title>
            <para>有关控件支持的事件，请参考API手册，在这里仅添加键盘事件。</para>
            <programlisting><![CDATA[ecui.get('demo').onkeydown = function (event) {
	var size = this.getWidth();
	switch (event.which) {
	case 49:
		if (size > 100) {
			this.setSize(size - 20, size - 20);
		}
		break;
	case 50:
		if (size < 200) {
			this.setSize(size + 20, size + 20);
		}
		break;
	}
}]]></programlisting>
        </section>
        <section>
            <title>总结</title>
            <para>在这个例子中，我们使用不到40行的代码演示了一个ecui控件的应用，您是否觉得使用ecui控件库开发b/s应用与使用c/s控件库存在类似的感觉呢？</para>
            <para>demo.html</para>
            <programlisting><![CDATA[<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>hello</title>
<script type="text/javascript" src="ecui-1.2.0.js"></script>
<style>
.ec-control-over {background:blue;color:white}
.ec-control-focus {background:red;color:white}
</style>
</head>
<body>
<div style="width:98px;height:98px;border:1px solid black;font-size:12px" ecui="type:control;id:demo">点击获取焦点，背景将变为红色。无焦点时鼠标移入，背景将变为蓝色。控件拥有焦点时，按1键变小，按2键变大。</div>
<script>
ecui.get('demo').onkeydown = function (event) {
	var size = this.getWidth();
	switch (event.which) {
	case 49:
		if (size > 100) {
			this.setSize(size - 20, size - 20);
		}
		break;
	case 50:
		if (size < 200) {
			this.setSize(size + 20, size + 20);
		}
		break;
	}
}
</script>
</body>
</html>]]></programlisting>
            <para>我们经过了4个步骤创建了这个应用：</para>
            <orderedlist>
                <listitem><para>为标签添加ecui初始化属性。</para></listitem>
                <listitem><para>添加ecui控件样式。（如果选用标准皮肤，可省略此步骤）</para></listitem>
                <listitem><para>添加ecui控件的事件处理。</para></listitem>
            </orderedlist>
        </section>
    </chapter>

    <chapter>
        <title>入门篇：使用ecui框架</title>
        <section>
            <title>控件样式的共性与个性</title>
            <para>每一类ecui控件都有其公共的样式，被称为类型样式，类型样式为ec-前缀加上控件名称。例如：基础控件的类型样式为ec-control，下拉框控件的类型样式为ec-select。</para>
			<para>控件初始化时，以标签class属性的第一个样式作为基本样式，如果class属性为空，将把类型样式作为基本样式，基本样式在控件初始化结束后不可以变更，通过getBaseClass方法可以得到基本样式。例如：</para>
			<programlisting><![CDATA[<div ecui="..." class="custom"></div>]]></programlisting>
			<para>上面标签的初始化得到的控件基本样式为custom。</para>
			<para>控件的类型样式与当前样式受控件状态的影响将产生状态样式，有关状态样式的说明参见下一节，通过setClass/getClass方法可以访问当前样式，</para>
        </section>
        <section>
            <title>控件状态与样式</title>
            <para>基础控件包含移入(over)，按压(press)，获取焦点(focus)，失效(disabled)四种状态，每一种状态均对应一个状态样式，状态样式是类型样式与当前样式分别加上状态后缀组成，例如类型样式为ec-control，基本样式为custom，在控件处于移入状态时，状态样式为ec-control-over与custom-over。</para>
			<para>我们可以通过alterClass方法设置或取消控件的状态样式。</para>
        </section>
        <section>
            <title>使用装饰器美化控件</title>
			<para>装饰器扩展了控件的结构，从而可以定义更多的样式。ecui内置了4种控件装饰器，分别是基本装饰器(decorater)、左右装饰器(lr-decorater)、上下装饰器(tb-decorater)、九宫格装饰器(magic-decorater)，通过decorate属性声明，如果需要嵌套使用装饰器，中间使用空白符分隔。例如：</para>
			<programlisting><![CDATA[<div ecui="...;decorate:magic-decorater(custom) decorater(demo)"></div>]]></programlisting>
			<para>装饰器没有类型样式，必须显式的指定装饰器的基本样式，装饰器同样包含状态样式，控件的状态样式发生改变时，装饰器也将同步设置或取消状态样式。</para>
        </section>
        <section>
            <title>控件的简单继承</title>
			<para>对于应用中重复使用的控件，如果它们对事件处理的方式相同，可以通过继承的方式提供业务控件，减少代码量。</para>
			<programlisting><![CDATA[ecui.ui.Custom = function (el, params) {
	ecui.ui.Control.call(this, el, params);
};
ecui.util.inherits(ecui.ui.Custom, ecui.ui.Control);
ecui.ui.Custom.prototype.onclick = function (event) {
	...
};]]></programlisting>
			<para>继承后使用以下方式引入：</para>
			<programlisting><![CDATA[<div ecui="type:custom"></div>]]></programlisting>
        </section>
        <section>
            <title>控件的简单组合</title>
			<para>对于应用中重复使用的控件组，可以通过拼接输出html代码片断简单的组合控件，ecui框架通过init方法为代码片断提供局部初始化。</para>
			<programlisting><![CDATA[el.innerHTML = '<div><div ecui="type:calendar;id:calendar"></div><div ecui="type:control;id:prev">上个月</div><div ecui="type:control;id:next">下个月</div></div>';
ecui.init(el);
ecui.get('prev').onclick = function () {
	ecui.get('calendar').move(-1);
};
ecui.get('next').onclick = function () {
	ecui.get('calendar').move(1);
};]]></programlisting>
        </section>
    </chapter>

    <chapter>
        <title>进阶篇：深入了解ecui框架</title>
        <section>
            <title>ecui渲染的工作原理</title>
        </section>
        <section>
            <title>动态创建控件的区别</title>
			<para>可以使用三种方式动态创建控件：$fastCreate、create与init。</para>
            <orderedlist>
                <listitem><para>$fastCreate方法不会进行逻辑关系的初始化，即不会自动查找父控件与初始化样式，通常被用于控件包含的子控件的快速创建。</para></listitem>
                <listitem><para>create方法以单个控件为单位创建控件，不会针对控件的批量创建进行优化，大量控件创建时效率较低。</para></listitem>
                <listitem><para>init方法针对html片断进行控件初始化，是批量创建控件的首选，通常init方法紧随在innerHTML的赋值之后执行，如果是被反复更新的区域，需要先使用dispose方法释放区域之前生成的控件，否则页面速度将会逐渐下降。</para></listitem>
            </orderedlist>
        </section>
        <section>
            <title>改变框架的工作状态</title>
        </section>
        <section>
            <title>创建新的公共控件</title>
        </section>
    </chapter>
</book>